%%
body
#include <structmember.h>
typedef struct
{
    PyObject_VAR_HEAD
    GvShape *_o;
} PyGvShape;

PyTypeObject G_GNUC_INTERNAL PyGvShape_Type;

static PyObject *
pygv_shape_from_shape(GvShape *shape)
{
    PyGvShape *self = PyObject_New(PyGvShape, &PyGvShape_Type);

    if (self != NULL) {
        self->_o = shape;
        return (PyObject *)self;
    }
    else {
        PyErr_SetString(PyExc_RuntimeError, "could not create Shape object");
        return NULL;
    }
}

/* 
 * static void
 * _PyGvShape_dealloc(PyGvShape* self)
 * {
 *     Py_XDECREF(self->_o);
 *     self->ob_type->tp_free((PyObject*)self);
 * }
 */

static int
_PyGvShape_init(PyGvShape *self, PyObject *args)
{
    int          type = GVSHAPE_POINT;
    GvShape *shape;

    if (!PyArg_ParseTuple(args, "|i:_gv.Shape.__init__", &type))
        return -1;

    shape = gv_shape_new(type);
    if (shape != NULL) {
        gv_shape_ref(shape);
        self->_o = shape;
    }
    else {
        PyErr_SetString(PyExc_RuntimeError, "could not create Shape object");
        return -1;
    }

    return 0;
}

static PyObject *
_wrap_gv_shape_from_xml(PyGvShape *self, PyObject *args)
{
    GvShape     *shape;
    CPLXMLNode  *cpl_tree;
    PyObject    *py_tree = NULL;

    if (!PyArg_ParseTuple(args, "O!:GvShape.from_xml",
                          &PyList_Type, &py_tree ) )
        return NULL;

    cpl_tree = PyListToXMLTree( py_tree );
    
    shape = gv_shape_from_xml_tree( cpl_tree );
    if( shape == NULL )
    {
        PyErr_SetString( PyExc_ValueError, 
                         "XML translation to GvShape filed." );
        return NULL;
    }
    else
    {
        char         swig_ptr[32];
        SWIG_SimpleMakePtr( swig_ptr, shape, "_GvShape" );
        return Py_BuildValue("s",swig_ptr);
    }
}

static PyObject *
_wrap_gv_shape_to_xml(PyGvShape *self, PyObject *args)
{
    char *swig_shape_ptr = NULL;
    GvShape *shape = NULL;
    CPLXMLNode *psTree;
    PyObject *py_xml = NULL;

    if (!PyArg_ParseTuple(args, "s:GvShape.to_xml",
                          &swig_shape_ptr))
        return NULL;

    if( swig_shape_ptr )
    {
        shape = SWIG_SimpleGetPtr( swig_shape_ptr, "_GvShape" );
    }

    if( shape == NULL )
        return NULL;

    psTree = gv_shape_to_xml_tree( shape );
    py_xml = XMLTreeToPyList( psTree );
    CPLDestroyXMLNode( psTree );

    return py_xml;
}

static PyObject *
_wrap_gv_shape_destroy(PyGvShape *self)
{
    gv_shape_delete(self->_o);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gv_shape_ref(PyGvShape *self)
{
    gv_shape_ref(self->_o);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gv_shape_unref(PyGvShape *self)
{
    gv_shape_unref(self->_o);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gv_shape_get_ref(PyGvShape *self)
{
    return Py_BuildValue( "i", gv_shape_get_ref(self->_o) );
}

/* 
 * static PyObject *
 * _wrap_gv_shape_copy(PyGvShape *self, PyObject *args)
 * {
 *     char  swig_shape_ptr[32];
 *     GvShape *shape = NULL, *copy = NULL;
 * 
 *     if (!PyArg_ParseTuple(args, "s:GvShape.copy",
 *                           &swig_shape_ptr))
 *     return NULL;
 * 
 *     if( swig_shape_ptr )
 *     {
 *         shape = SWIG_SimpleGetPtr( swig_shape_ptr, "_GvShape" );
 *     }
 * 
 *     if( shape != NULL )
 *         copy = gv_shape_copy( shape );
 * 
 *     SWIG_SimpleMakePtr( swig_ptr, copy, "_GvShape" );
 * 
 *     return Py_BuildValue("s",swig_ptr);
 * }
 */

/* 
 * static PyObject *
 * _wrap_gv_shape_line_from_nodelists(PyGvShape *self, PyObject *args)
 * {
 *     PyObject *pyxlist = NULL;
 *     PyObject *pyylist = NULL;
 *     PyObject *pyzlist = NULL;
 * 
 *     int       node_count, i;
 *     GvShape *shape;
 *     gvgeocoord xnode, ynode, znode;
 *     int ring = 0;
 * 
 *     if (!PyArg_ParseTuple(args, "O!O!O!:GvShape.line_from_nodelist",
 *                           &PyList_Type,&pyxlist,
 *                           &PyList_Type,&pyylist,
 *                           &PyList_Type,&pyzlist) )
 *     return NULL;
 * 
 *     node_count = PyList_Size(pyxlist);
 *     if (node_count < 1)
 *     {
 *         PyErr_SetString(PyExc_ValueError,
 *               "require at least one node in list for gv_shape_line_from_nodelist");
 *         return NULL;
 *     }
 *     if ((node_count != PyList_Size(pyylist)) ||
 *         (node_count != PyList_Size(pyzlist)))
 *     {
 *         PyErr_SetString(PyExc_ValueError,
 *               "x, y, and z node lists must have identical lengths for gv_shape_line_from_nodelist");
 *         return NULL;
 *     }
 * 
 *     shape = gv_shape_new(GVSHAPE_LINE);
 * 
 *     for( i = 0; i < node_count; i++ )
 *     {
 *         if ( ( !PyArg_Parse( PyList_GET_ITEM(pyxlist,i), 
 *                 Ccast ":gv_shape_line_from_nodelist" , &xnode ) ) ||
 *              ( !PyArg_Parse( PyList_GET_ITEM(pyylist,i), 
 *                 Ccast ":gv_shape_line_from_nodelist" , &ynode ) ) ||
 *              ( !PyArg_Parse( PyList_GET_ITEM(pyzlist,i), 
 *                 Ccast ":gv_shape_line_from_nodelist" , &znode ) ))
 *         {
 *             PyErr_SetString(PyExc_ValueError,
 *                     "expecting floats in gv_shape_line_from_nodelist arguments");
 *             gv_shape_delete(shape);
 *             return NULL;
 *         }
 *         gv_shape_add_node(shape, ring, xnode, ynode, znode);
 *     }
 * 
 *     return Py_BuildValue("s",swig_ptr);
 * }
 */

/* 
 * static PyObject *
 * _wrap_gv_shapes_lines_for_vecplot(PyGvShape *self, PyObject *args)
 * {
 *     PyObject *pyxlist=NULL;
 *     PyObject *pyylist=NULL;
 *     PyObject *pyzlist=NULL;
 *     PyObject *pyoklist=NULL;
 * 
 *     int       node_count, i, j, last_ok, shape_count,last_shape_nodes, oknode;
 *     GvShape *shape;
 *     GvShapes *shapes;
 *     gvgeocoord xnode, ynode, znode;
 *     int ring=0;
 *     int *shape_ids=NULL;
 * 
 *     if (!PyArg_ParseTuple(args, "O!O!O!O!:gv_shapes_lines_for_vecplot",
 *                           &PyList_Type,&pyxlist,
 *                           &PyList_Type,&pyylist,
 *                           &PyList_Type,&pyzlist,
 *                           &PyList_Type,&pyoklist) )
 *     return NULL;
 * 
 *     node_count=PyList_Size(pyxlist);
 *     if (node_count < 1)
 *     {
 *         PyErr_SetString(PyExc_ValueError,
 *               "require at least one node in list for gv_shapes_lines_for_vecplot");
 *         return NULL;
 *     }
 *     if ((node_count != PyList_Size(pyylist)) ||
 *         (node_count != PyList_Size(pyzlist)) ||
 *         (node_count != PyList_Size(pyoklist)))
 *     {
 *         PyErr_SetString(PyExc_ValueError,
 *               "x, y, z, ok lists must have identical lengths for gv_shapes_lines_for_vecplot");
 *         return NULL;
 *     }
 *     shapes = (GvShapes *) gv_shapes_new();
 *     shape = gv_shape_new(GVSHAPE_LINE);
 *     gv_shapes_add_shape(shapes,shape);
 *     last_ok=1;
 *     shape_count=1;
 *     last_shape_nodes=0;
 *     for( i = 0; i < node_count; i++ )
 *     {
 *         if(( !PyArg_Parse( PyList_GET_ITEM(pyxlist,i), 
 *               Ccast ":gv_shapes_lines_for_vecplot" , &xnode ) ) ||
 *            ( !PyArg_Parse( PyList_GET_ITEM(pyylist,i), 
 *               Ccast ":gv_shapes_lines_for_vecplot" , &ynode ) ) ||
 *            ( !PyArg_Parse( PyList_GET_ITEM(pyzlist,i), 
 *               Ccast ":gv_shapes_lines_for_vecplot" , &znode ) ) ||
 *            ( !PyArg_Parse( PyList_GET_ITEM(pyoklist,i), 
 *               "i:gv_shapes_lines_for_vecplot" , &oknode ) ))
 *         {
 *             PyErr_SetString(PyExc_ValueError,
 *           "expecting floats for nodes, ints for ok in gv_shapes_lines_for_vecplot arguments");
 *             shape_ids=g_new(int,shape_count);
 *             for ( j= 0 ; j < shape_count; j++ )
 *             {
 *                 *(shape_ids+sizeof(int)) = j;
 *             }
 *             gv_shapes_delete_shapes(shapes,shape_count,shape_ids);
 *             g_free(shape_ids);
 *             return NULL;
 *         }
 *         if (oknode == 1)
 *         {
 *             gv_shape_add_node(shape,ring,xnode,ynode,znode);
 *             last_ok = 1;
 *             last_shape_nodes=last_shape_nodes+1;
 *         }
 *         else if (last_ok == 1)
 *         {
 *             shape=gv_shape_new(GVSHAPE_LINE);
 *             gv_shapes_add_shape(shapes,shape);
 *             shape_count=shape_count+1;
 *             last_shape_nodes=0;
 *             last_ok = 0;
 *         } 
 *     }
 *     if (last_shape_nodes == 0)
 *     {
 *         shape_ids=g_new(int,1);
 *         *shape_ids=shape_count-1;
 *         gv_shapes_delete_shapes(shapes,1,shape_ids);
 *         g_free(shape_ids);
 *     }
 * 
 *     return pygobject_new((GObject *) shapes);
 * }
 */

static PyObject *
_wrap_gv_shape_get_property(PyGvShape *self, PyObject *args)
{
    char *key;
    const char *value = NULL;

    if (!PyArg_ParseTuple(args, "s:GvShape.get_property", &key))
        return NULL;

    value = gv_properties_get( gv_shape_get_properties(self->_o), key );
    if (value != NULL)
        return Py_BuildValue("s", value);
    else
    {
        Py_INCREF(Py_None);
        return Py_None;
    }
}

static PyObject *
_wrap_gv_shape_get_properties(PyGvShape *self)
{
    GvProperties *properties = NULL;
    PyObject *psDict = NULL;

    properties = gv_shape_get_properties(self->_o);

    psDict = PyDict_New();
    if( properties != NULL )
    {
        int        i, count;

        count = gv_properties_count( properties );
        for( i = 0; i < count; i++ )
        {
            const char *value, *name;
            PyObject *py_name, *py_value;

            value = gv_properties_get_value_by_index(properties,i);
            name = gv_properties_get_name_by_index(properties,i);

            py_name = Py_BuildValue("s",name);
            py_value = Py_BuildValue("s",value);
            PyDict_SetItem( psDict, py_name, py_value );

            Py_DECREF(py_name);
            Py_DECREF(py_value);
        }
    }

    return psDict;
}

static PyObject *
_wrap_gv_shape_get_typed_properties(PyGvShape *self, PyObject *args)
{
    GvProperties *properties = NULL;
    PyObject *psDict = NULL;
    PyObject *pyFieldList = NULL;
    int      nCount, i;

    if (!PyArg_ParseTuple(args, "O!:GvShape.get_typed_properties",
                          &PyList_Type, &pyFieldList))
        return NULL;

    properties = gv_shape_get_properties(self->_o);

    psDict = PyDict_New();
    if( properties == NULL )
        return psDict;

    nCount = PyList_Size(pyFieldList);
    for( i = 0; i < nCount; i++ )
    {
        char *pszFieldName = NULL;
        int nNumericFlag = 0;
        const char *value;
        PyObject *py_name, *py_value;

        if( !PyArg_Parse( PyList_GET_ITEM(pyFieldList,i), "(si)",
                          &pszFieldName, &nNumericFlag ) )
        {
            PyErr_SetString(PyExc_ValueError,
                            "expecting (name,flag) tuples in list.");
            return NULL;
        }

        value = gv_properties_get(properties,pszFieldName);
        if( value == NULL )
        {
            py_value = Py_None;
            Py_INCREF( Py_None );
        }
        else if( nNumericFlag )
            py_value = Py_BuildValue("f",atof(value));
        else
            py_value = Py_BuildValue("s",value);

        py_name = Py_BuildValue("s",pszFieldName);

        PyDict_SetItem( psDict, py_name, py_value );

        Py_DECREF(py_name);
        Py_DECREF(py_value);
    }

    return psDict;
}

static PyObject *
_wrap_gv_shape_set_property(PyGvShape *self, PyObject *args)
{
    char *name=NULL, *value=NULL;
    GvProperties *properties = NULL;

    if (!PyArg_ParseTuple(args, "ss:GvShape.set_property", &name, &value))
        return NULL;

    properties = gv_shape_get_properties(self->_o);
    gv_properties_set(properties, name, value);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gv_shape_set_properties(PyGvShape *self, PyObject *args)
{
    GvProperties *properties = NULL;
    PyObject *psDict = NULL;
    PyObject    *pyKey = NULL, *pyValue = NULL;
    int i;

    if (!PyArg_ParseTuple(args, "O!:GvShape.set_properties", &PyDict_Type, &psDict))
        return NULL;

    properties = gv_shape_get_properties(self->_o);
    gv_properties_clear(properties);

    i = 0;
    while( PyDict_Next( psDict, &i, &pyKey, &pyValue ) )
    {
        char            *key = NULL, *value = NULL;

        if( !PyArg_Parse( pyKey, "s", &key )
            || !PyArg_Parse( pyValue, "s", &value ))
            continue;

        gv_properties_set( properties, key, value );

        pyKey = pyValue = NULL;
    }

    Py_INCREF(Py_None);
    return Py_None;
}

static PyObject *
_wrap_gv_shape_get_shape_type(PyGvShape *self)
{
    return Py_BuildValue("i", gv_shape_type(self->_o));
}

static PyObject *
_wrap_gv_shape_get_rings(PyGvShape *self)
{
    return Py_BuildValue("i", gv_shape_get_rings(self->_o));
}

static PyObject *
_wrap_gv_shape_get_nodes(PyGvShape *self, PyObject *args)
{
    int      ring = 0;

    if (!PyArg_ParseTuple(args, "|i:GvShape.get_nodes", &ring))
        return NULL;

    return Py_BuildValue("i", gv_shape_get_nodes(self->_o, ring));
}

static PyObject *
_wrap_gv_shape_add_node(PyGvShape *self, PyObject *args)
{
    int        ring = 0;
    gvgeocoord x=0.0, y=0.0, z=0.0;

    if (!PyArg_ParseTuple(args, "s" CCC "i:GvShape.add_node", &x, &y, &z, &ring))
        return NULL;

    return Py_BuildValue("i", gv_shape_add_node(self->_o, ring, x, y, z));
}

static PyObject *
_wrap_gv_shape_set_node(PyGvShape *self, PyObject *args)
{
    int        ring = 0, node = 0;
    gvgeocoord x=0.0, y=0.0, z=0.0;

    if (!PyArg_ParseTuple(args, "s" CCC "ii:GvShape.set_node", &x, &y, &z, &node, &ring))
        return NULL;

    return Py_BuildValue("i", gv_shape_set_xyz(self->_o, ring, node, x, y, z));
}

static PyObject *
_wrap_gv_shape_get_node(PyGvShape *self, PyObject *args)
{
    int      ring = 0, node = 0;

    if (!PyArg_ParseTuple(args, "ii:GvShape.get_node", &node, &ring))
        return NULL;

    return Py_BuildValue("(" CCC ")",
                         gv_shape_get_x(self->_o, ring, node),
                         gv_shape_get_y(self->_o, ring, node),
                         gv_shape_get_z(self->_o, ring, node));
}

static PyObject *
_wrap_gv_shape_point_in_polygon(PyGvShape *self, PyObject *args)
{
    double  x, y;

    if (!PyArg_ParseTuple(args, "dd:GvShape.point_in_polygon", &x, &y))
        return NULL;

    return Py_BuildValue("i", gv_shape_point_in_polygon(self->_o, x, y));
}

static PyObject *
_wrap_gv_shape_distance_from_polygon(PyGvShape *self, PyObject *args)
{
    double  x, y;

    if (!PyArg_ParseTuple(args, "dd:GvShape.distance_from_polygon", &x, &y))
        return NULL;

    return Py_BuildValue("d", gv_shape_distance_from_polygon(self->_o, x, y));
}

/* 
static PyObject *
 * _wrap_gv_shape_clip_to_rect(PyGvShape *self, PyObject *args)
 * {
 *     double  x, y, width, height;
 * 
 *     if (!PyArg_ParseTuple(args, "dddd:GvShape.clip_to_rect", &x, &y, &width, &height))
 *         return NULL;
 * 
 *     GvRect      rect;
 *     GvShape *new_shape;
 * 
 *     rect.x = x;
 *     rect.y = y;
 *     rect.width = width;
 *     rect.height = height;
 * 
 *     new_shape = gv_shape_clip_to_rect(self->_o, &rect);
 * 
 *     if (new_shape == NULL)
 *     {
 *         Py_INCREF(Py_None);
 *         return Py_None;
 *     }
 *     else
 *     {
 *         char swig_ptr[128];
 * 
 *         SWIG_SimpleMakePtr( swig_ptr, new_shape, "_GvShape" );
 * 
 *         return Py_BuildValue("s",swig_ptr);
 *     }
 * }
 */

/* 
 * static PyObject *
 * _wrap_gv_shape_add_shape(PyGvShape *self, PyObject *args)
 * {
 *     char *swig_sub_shape_ptr = NULL;
 *     GvShape *shape = NULL, *sub_shape = NULL;
 * 
 *     if (!PyArg_ParseTuple(args, "s:GvShape.add_shape", &swig_sub_shape_ptr))
 *         return NULL;
 * 
 *     if( swig_sub_shape_ptr )
 *         sub_shape = SWIG_SimpleGetPtr( swig_sub_shape_ptr, "_GvShape" );
 * 
 *     if( shape != NULL && sub_shape != NULL )
 *         gv_shape_collection_add_shape( shape, sub_shape );
 * 
 *     Py_INCREF(Py_None);
 *     return Py_None;
 * }
 */
static PyObject *
_wrap_gv_shape_collection_get_count(PyGvShape *self)
{
    return Py_BuildValue( "i", gv_shape_collection_get_count(self->_o) );
}

/* 
static PyObject *
 * _wrap_gv_shape_get_shape(PyGvShape *self, PyObject *args)
 * {
 *     int shape_index;
 * 
 *     if (!PyArg_ParseTuple(args, "i:GvShape.get_shape", &shape_index))
 *         return NULL;
 * 
 *     shape = gv_shape_collection_get_shape(self->_o, shape_index);
 *     if( shape == NULL )
 *     {
 *         PyErr_SetString(PyExc_IndexError, "shape index out of range for collection");
 *         return NULL;
 *     }
 *     else
 *     {
 *         char swig_ptr[128];
 *         
 *         SWIG_SimpleMakePtr( swig_ptr, shape, "_GvShape" );
 *         
 *         return Py_BuildValue("s",swig_ptr);
 *     }
 * }
 */

/* 
 * static PySequenceMethods _wrap_gv_shape_tp_as_sequence = {
 *     0,
 *     0,
 *     0,
 *     0,
 *     0,
 *     0,
 *     0,
 *     0,
 * };
 */

static const PyMethodDef _PyGvShape_methods[] = {
    { "add_node", (PyCFunction)_wrap_gv_shape_add_node, METH_VARARGS,
      NULL },
//~     { "add_shape", (PyCFunction)_wrap_gv_shape_add_shape, METH_VARARGS,
//~       NULL },
    { "collection_get_count", (PyCFunction)_wrap_gv_shape_collection_get_count, METH_NOARGS,
      NULL },
//~     { "copy", (PyCFunction)_wrap_gv_shape_copy, METH_VARARGS,
//~       NULL },
    { "destroy", (PyCFunction)_wrap_gv_shape_destroy, METH_NOARGS,
      NULL },
    { "distance_from_polygon", (PyCFunction)_wrap_gv_shape_distance_from_polygon, METH_NOARGS,
      NULL },
    { "get_node", (PyCFunction)_wrap_gv_shape_get_node, METH_NOARGS,
      NULL },
    { "get_nodes", (PyCFunction)_wrap_gv_shape_get_nodes, METH_NOARGS,
      NULL },
    { "get_properties", (PyCFunction)_wrap_gv_shape_get_properties, METH_NOARGS,
      NULL },
    { "get_property", (PyCFunction)_wrap_gv_shape_get_property, METH_VARARGS,
      NULL },
    { "get_ref", (PyCFunction)_wrap_gv_shape_get_ref, METH_NOARGS,
      NULL },
    { "get_rings", (PyCFunction)_wrap_gv_shape_get_rings, METH_NOARGS,
      NULL },
//~     { "get_shape", (PyCFunction)_wrap_gv_shape_get_shape, METH_VARARGS,
//~       NULL },
    { "get_shape_type", (PyCFunction)_wrap_gv_shape_get_shape_type, METH_NOARGS,
      NULL },
    { "get_typed_properties", (PyCFunction)_wrap_gv_shape_get_typed_properties, METH_VARARGS,
      NULL },
    { "ref", (PyCFunction)_wrap_gv_shape_ref, METH_NOARGS,
      NULL },
    { "point_in_polygon", (PyCFunction)_wrap_gv_shape_point_in_polygon, METH_VARARGS,
      NULL },
    { "set_node", (PyCFunction)_wrap_gv_shape_set_node, METH_VARARGS,
      NULL },
    { "set_properties", (PyCFunction)_wrap_gv_shape_set_properties, METH_VARARGS,
      NULL },
    { "set_property", (PyCFunction)_wrap_gv_shape_set_property, METH_VARARGS,
      NULL },
    { "unref", (PyCFunction)_wrap_gv_shape_unref, METH_NOARGS,
      NULL },
    { NULL, NULL, 0, NULL }
};

static PyObject *
_PyGvShape_get_o(PyGvShape *self, void *closure)
{
    g_print("%p", self->_o);
//~     Py_INCREF(self->_o);
    Py_INCREF(Py_None);
    return Py_None;
}

static const PyGetSetDef _PyGvShape_getsets[] = {
    { "_o", (getter)_PyGvShape_get_o, (setter)0 },
    { NULL, (getter)0, (setter)0 },
};

//~ static PyMemberDef _PyGvShape_members[] = {
//~     { "_o", T_OBJECT, offsetof(PyGvShape, _o), 0, NULL},
//~     { NULL },
//~ };

PyTypeObject G_GNUC_INTERNAL PyGvShape_Type = {
    PyObject_HEAD_INIT(NULL)
    0,                                 /* ob_size */
    "_gv.Shape",                   /* tp_name */
    sizeof(PyGvShape),          /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)0,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)0,       /* tp_getattr */
    (setattrfunc)0,       /* tp_setattr */
    (cmpfunc)0,           /* tp_compare */
    (reprfunc)0,             /* tp_repr */
    (PyNumberMethods*)0,     /* tp_as_number */
    (PySequenceMethods*)0, /* tp_as_sequence */
    (PyMappingMethods*)0,   /* tp_as_mapping */
    (hashfunc)0,             /* tp_hash */
    (ternaryfunc)0,          /* tp_call */
    (reprfunc)0,              /* tp_str */
    (getattrofunc)0,     /* tp_getattro */
    (setattrofunc)0,     /* tp_setattro */
    (PyBufferProcs*)0,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)0,     /* tp_traverse */
    (inquiry)0,             /* tp_clear */
    (richcmpfunc)0,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)0,          /* tp_iter */
    (iternextfunc)0,     /* tp_iternext */
    (struct PyMethodDef*)_PyGvShape_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    (struct PyGetSetDef*)_PyGvShape_getsets,  /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)0,    /* tp_descr_get */
    (descrsetfunc)0,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_PyGvShape_init,             /* tp_init */
    (allocfunc)0,           /* tp_alloc */
    (newfunc)0,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)0              /* tp_is_gc */
};
